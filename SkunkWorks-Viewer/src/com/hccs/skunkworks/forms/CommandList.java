package com.hccs.skunkworks.forms;

import com.hccs.skunkworks.forms.tablemodels.CommandTableModel;
import com.hccs.skunkworks.jpa.controllers.CommandQuries;
import com.hccs.skunkworks.jpa.models.CommandBean;
import com.hccs.util.StringUtilities;
import com.hccs.util.Task;
import com.hccs.util.TaskThread;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author DCSalenga
 */
public class CommandList extends javax.swing.JDialog {

    private CommandTableModel cModel;
    private final CommandQuries regQuries;

    public CommandList(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        regQuries = new CommandQuries();
        cModel = new CommandTableModel();
        initComponents();
        initTable();
    }

    private void initTable() {
        tblCommands.setModel(cModel);
        tblCommands.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                System.out.println("Selected: ");

                ListSelectionModel lsm = (ListSelectionModel) e.getSource();

                if (!lsm.isSelectionEmpty()) {
                    int row = tblCommands.convertRowIndexToModel(tblCommands.getSelectedRow());
                    CommandBean selectedRegBean = (CommandBean) cModel.getWrapperObject(row);
                    System.out.println(selectedRegBean);
                }
            }
        });

    }

    private void searchCommand() {
        System.out.println("thread start");
        new TaskThread(new Task() {
            List<CommandBean> regList;
            Long startTime;
            boolean error;

            @Override
            public void start() {
                cModel.removeAll();
                toggleFields(false);
            }

            @Override
            public void initialize() {
                startTime = System.nanoTime();
            }

            @Override
            public void doInBackground() {
                try {

                    String searchVal = txtCommandSearch.getText().trim();
                    if (searchVal.isEmpty()) {
                        regList = regQuries.getAllRequestBean(true);
                    } else {
                        regList = regQuries.getAllRequestBean(false);
                    }

//                    form.clearSearchBox();
                } catch (Exception e) {
                    e.printStackTrace();
                    regList = new ArrayList<>();
                    error = true;
                }

                System.out.println("Size: " + regList.size());
                int msgSize;
                if ((msgSize = regList.size()) > 0) {
                    cModel.addBeanlsToModelOrder(regList);
                    tblCommands.setModel(cModel);
                }
                System.out.println("Account count: " + msgSize);
            }

            @Override
            public void finished() {
                toggleFields(true);
                if (error) {
//                    form.showConnectionError();
                    System.out.println("Error...");
                } else {
//                    form.toggleForm(true);
//                    form.setlabelStatus("");
//                    form.setRowCountLabel();
//                    form.repaint();
                }
                System.out.println("Account Time: "
                        + StringUtilities.nanoTime2HumanReadable(System.nanoTime() - startTime));
//                tblCommands.revalidate();
//                tblCommands.repaint();
            }
        }
        ).start();
    }

    private String getFieldValue(JTextField textField) {
        return textField.getText().trim().toUpperCase();
    }

    private void clearFields() {
        txtCommandName.setText("");
        txtCommandExtension.setText("");
        txtCommandDescription.setText("");
        txtCommand.setText("");
    }

    private void toggleFields(boolean b) {
        txtCommandName.setEnabled(b);
        txtCommandExtension.setEnabled(b);
        txtCommandDescription.setEnabled(b);
        txtCommand.setEnabled(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCommandSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCommands = new org.jdesktop.swingx.JXTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCommandName = new javax.swing.JTextField();
        txtCommandExtension = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCommand = new javax.swing.JTextArea();
        chkCommandActive = new javax.swing.JCheckBox();
        txtCommandDescription = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Search: ");
        jPanel4.add(jLabel1, java.awt.BorderLayout.WEST);

        txtCommandSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCommandSearchKeyReleased(evt);
            }
        });
        jPanel4.add(txtCommandSearch, java.awt.BorderLayout.CENTER);

        btnSearch.setText("Fetch All");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel4.add(btnSearch, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        tblCommands.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblCommands);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Command Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Extension: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Commad: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(txtCommandName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(txtCommandExtension, gridBagConstraints);

        txtCommand.setColumns(20);
        txtCommand.setRows(5);
        jScrollPane2.setViewportView(txtCommand);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.ipady = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        chkCommandActive.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(chkCommandActive, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(txtCommandDescription, gridBagConstraints);

        jLabel5.setText("Description: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jLabel5, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave);

        jPanel5.add(jPanel1);

        getContentPane().add(jPanel5, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        new TaskThread(new Task() {
            CommandBean bean = new CommandBean();

            @Override
            public void start() {
                toggleFields(false);
            }

            @Override
            public void initialize() {
                bean.setName(getFieldValue(txtCommandName));
                bean.setExtension(getFieldValue(txtCommandExtension));
                bean.setDescription(txtCommandDescription.getText());
                bean.setActive(chkCommandActive.isSelected());
                bean.setCommand(txtCommand.getText());
            }

            @Override
            public void doInBackground() throws InterruptedException {
                regQuries.save(bean);
            }

            @Override
            public void finished() {
                clearFields();
                toggleFields(true);
            }

        }).start();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtCommandSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommandSearchKeyReleased
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            btnSearchActionPerformed(null);
        }
    }//GEN-LAST:event_txtCommandSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        System.out.println("1");
        searchCommand();
        System.out.println("2");

    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CommandList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CommandList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CommandList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CommandList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CommandList dialog = new CommandList(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox chkCommandActive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXTable tblCommands;
    private javax.swing.JTextArea txtCommand;
    private javax.swing.JTextField txtCommandDescription;
    private javax.swing.JTextField txtCommandExtension;
    private javax.swing.JTextField txtCommandName;
    private javax.swing.JTextField txtCommandSearch;
    // End of variables declaration//GEN-END:variables
}
